//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ReaderUtility.Dal.ServerService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DbObject", Namespace="http://schemas.datacontract.org/2004/07/Init.DbCore")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ReaderUtility.Dal.ServerService.Equipment))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ReaderUtility.Dal.ServerService.Group))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ReaderUtility.Dal.ServerService.Movement))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ReaderUtility.Dal.ServerService.Store))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ReaderUtility.Dal.ServerService.Trip))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ReaderUtility.Dal.ServerService.TripComplectation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ReaderUtility.Dal.ServerService.Tag))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ReaderUtility.Dal.ServerService.GeoPoints))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ReaderUtility.Dal.ServerService.kObject))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ReaderUtility.Dal.ServerService.Unit))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ReaderUtility.Dal.ServerService.UniqEquipmentObject))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ReaderUtility.Dal.ServerService.NonUniqEquipmentObject))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ReaderUtility.Dal.ServerService.kEquipment))]
    public partial class DbObject : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Equipment", Namespace="http://schemas.datacontract.org/2004/07/DAL.SQL.DataObjects")]
    [System.SerializableAttribute()]
    public partial class Equipment : ReaderUtility.Dal.ServerService.DbObject {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> LastMovementIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TagIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int kEquipmentIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> LastMovementId {
            get {
                return this.LastMovementIdField;
            }
            set {
                if ((this.LastMovementIdField.Equals(value) != true)) {
                    this.LastMovementIdField = value;
                    this.RaisePropertyChanged("LastMovementId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TagId {
            get {
                return this.TagIdField;
            }
            set {
                if ((this.TagIdField.Equals(value) != true)) {
                    this.TagIdField = value;
                    this.RaisePropertyChanged("TagId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int kEquipmentId {
            get {
                return this.kEquipmentIdField;
            }
            set {
                if ((this.kEquipmentIdField.Equals(value) != true)) {
                    this.kEquipmentIdField = value;
                    this.RaisePropertyChanged("kEquipmentId");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Group", Namespace="http://schemas.datacontract.org/2004/07/DAL.SQL.DataObjects")]
    [System.SerializableAttribute()]
    public partial class Group : ReaderUtility.Dal.ServerService.DbObject {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ParentIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ParentId {
            get {
                return this.ParentIdField;
            }
            set {
                if ((this.ParentIdField.Equals(value) != true)) {
                    this.ParentIdField = value;
                    this.RaisePropertyChanged("ParentId");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Movement", Namespace="http://schemas.datacontract.org/2004/07/DAL.SQL.DataObjects")]
    [System.SerializableAttribute()]
    public partial class Movement : ReaderUtility.Dal.ServerService.DbObject {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateOfMovementField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> EquipmentIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsArrivedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UnitIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateOfMovement {
            get {
                return this.DateOfMovementField;
            }
            set {
                if ((this.DateOfMovementField.Equals(value) != true)) {
                    this.DateOfMovementField = value;
                    this.RaisePropertyChanged("DateOfMovement");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> EquipmentId {
            get {
                return this.EquipmentIdField;
            }
            set {
                if ((this.EquipmentIdField.Equals(value) != true)) {
                    this.EquipmentIdField = value;
                    this.RaisePropertyChanged("EquipmentId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsArrived {
            get {
                return this.IsArrivedField;
            }
            set {
                if ((this.IsArrivedField.Equals(value) != true)) {
                    this.IsArrivedField = value;
                    this.RaisePropertyChanged("IsArrived");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UnitId {
            get {
                return this.UnitIdField;
            }
            set {
                if ((this.UnitIdField.Equals(value) != true)) {
                    this.UnitIdField = value;
                    this.RaisePropertyChanged("UnitId");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Store", Namespace="http://schemas.datacontract.org/2004/07/Server.Dal.SQL.DataObjects")]
    [System.SerializableAttribute()]
    public partial class Store : ReaderUtility.Dal.ServerService.DbObject {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double LatitudeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double LongitudeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double RadiusField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Latitude {
            get {
                return this.LatitudeField;
            }
            set {
                if ((this.LatitudeField.Equals(value) != true)) {
                    this.LatitudeField = value;
                    this.RaisePropertyChanged("Latitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Longitude {
            get {
                return this.LongitudeField;
            }
            set {
                if ((this.LongitudeField.Equals(value) != true)) {
                    this.LongitudeField = value;
                    this.RaisePropertyChanged("Longitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Radius {
            get {
                return this.RadiusField;
            }
            set {
                if ((this.RadiusField.Equals(value) != true)) {
                    this.RadiusField = value;
                    this.RaisePropertyChanged("Radius");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Trip", Namespace="http://schemas.datacontract.org/2004/07/Server.Dal.SQL.DataObjects")]
    [System.SerializableAttribute()]
    public partial class Trip : ReaderUtility.Dal.ServerService.DbObject {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime EndTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime StartTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UnitIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime EndTime {
            get {
                return this.EndTimeField;
            }
            set {
                if ((this.EndTimeField.Equals(value) != true)) {
                    this.EndTimeField = value;
                    this.RaisePropertyChanged("EndTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime StartTime {
            get {
                return this.StartTimeField;
            }
            set {
                if ((this.StartTimeField.Equals(value) != true)) {
                    this.StartTimeField = value;
                    this.RaisePropertyChanged("StartTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UnitId {
            get {
                return this.UnitIdField;
            }
            set {
                if ((this.UnitIdField.Equals(value) != true)) {
                    this.UnitIdField = value;
                    this.RaisePropertyChanged("UnitId");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TripComplectation", Namespace="http://schemas.datacontract.org/2004/07/Server.Dal.SQL.DataObjects")]
    [System.SerializableAttribute()]
    public partial class TripComplectation : ReaderUtility.Dal.ServerService.DbObject {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int EquipmentIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsStartField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TripIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EquipmentId {
            get {
                return this.EquipmentIdField;
            }
            set {
                if ((this.EquipmentIdField.Equals(value) != true)) {
                    this.EquipmentIdField = value;
                    this.RaisePropertyChanged("EquipmentId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsStart {
            get {
                return this.IsStartField;
            }
            set {
                if ((this.IsStartField.Equals(value) != true)) {
                    this.IsStartField = value;
                    this.RaisePropertyChanged("IsStart");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TripId {
            get {
                return this.TripIdField;
            }
            set {
                if ((this.TripIdField.Equals(value) != true)) {
                    this.TripIdField = value;
                    this.RaisePropertyChanged("TripId");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Tag", Namespace="http://schemas.datacontract.org/2004/07/Server.Dal.SQL.DataObjects")]
    [System.SerializableAttribute()]
    public partial class Tag : ReaderUtility.Dal.ServerService.DbObject {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> EquipmentIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RfidField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> EquipmentId {
            get {
                return this.EquipmentIdField;
            }
            set {
                if ((this.EquipmentIdField.Equals(value) != true)) {
                    this.EquipmentIdField = value;
                    this.RaisePropertyChanged("EquipmentId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Rfid {
            get {
                return this.RfidField;
            }
            set {
                if ((object.ReferenceEquals(this.RfidField, value) != true)) {
                    this.RfidField = value;
                    this.RaisePropertyChanged("Rfid");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GeoPoints", Namespace="http://schemas.datacontract.org/2004/07/Server.Dal.SQL.DataObjects")]
    [System.SerializableAttribute()]
    public partial class GeoPoints : ReaderUtility.Dal.ServerService.DbObject {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double LatitudeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double LongitudeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime TimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TripIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UnitIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Latitude {
            get {
                return this.LatitudeField;
            }
            set {
                if ((this.LatitudeField.Equals(value) != true)) {
                    this.LatitudeField = value;
                    this.RaisePropertyChanged("Latitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Longitude {
            get {
                return this.LongitudeField;
            }
            set {
                if ((this.LongitudeField.Equals(value) != true)) {
                    this.LongitudeField = value;
                    this.RaisePropertyChanged("Longitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Time {
            get {
                return this.TimeField;
            }
            set {
                if ((this.TimeField.Equals(value) != true)) {
                    this.TimeField = value;
                    this.RaisePropertyChanged("Time");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TripId {
            get {
                return this.TripIdField;
            }
            set {
                if ((this.TripIdField.Equals(value) != true)) {
                    this.TripIdField = value;
                    this.RaisePropertyChanged("TripId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UnitId {
            get {
                return this.UnitIdField;
            }
            set {
                if ((this.UnitIdField.Equals(value) != true)) {
                    this.UnitIdField = value;
                    this.RaisePropertyChanged("UnitId");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="kObject", Namespace="http://schemas.datacontract.org/2004/07/Server.Dal.SQL.DataObjects")]
    [System.SerializableAttribute()]
    public partial class kObject : ReaderUtility.Dal.ServerService.DbObject {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IsStoreField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IsStore {
            get {
                return this.IsStoreField;
            }
            set {
                if ((this.IsStoreField.Equals(value) != true)) {
                    this.IsStoreField = value;
                    this.RaisePropertyChanged("IsStore");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeField, value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Unit", Namespace="http://schemas.datacontract.org/2004/07/Server.Dal.SQL.DataObjects")]
    [System.SerializableAttribute()]
    public partial class Unit : ReaderUtility.Dal.ServerService.DbObject {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BortNumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GosNumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SerialNumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int kObjectIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BortNum {
            get {
                return this.BortNumField;
            }
            set {
                if ((object.ReferenceEquals(this.BortNumField, value) != true)) {
                    this.BortNumField = value;
                    this.RaisePropertyChanged("BortNum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GosNum {
            get {
                return this.GosNumField;
            }
            set {
                if ((object.ReferenceEquals(this.GosNumField, value) != true)) {
                    this.GosNumField = value;
                    this.RaisePropertyChanged("GosNum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SerialNum {
            get {
                return this.SerialNumField;
            }
            set {
                if ((object.ReferenceEquals(this.SerialNumField, value) != true)) {
                    this.SerialNumField = value;
                    this.RaisePropertyChanged("SerialNum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int kObjectId {
            get {
                return this.kObjectIdField;
            }
            set {
                if ((this.kObjectIdField.Equals(value) != true)) {
                    this.kObjectIdField = value;
                    this.RaisePropertyChanged("kObjectId");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UniqEquipmentObject", Namespace="http://schemas.datacontract.org/2004/07/Server.Dal.SQL.DataObjects")]
    [System.SerializableAttribute()]
    public partial class UniqEquipmentObject : ReaderUtility.Dal.ServerService.DbObject {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int EquipmentIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UnitIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EquipmentId {
            get {
                return this.EquipmentIdField;
            }
            set {
                if ((this.EquipmentIdField.Equals(value) != true)) {
                    this.EquipmentIdField = value;
                    this.RaisePropertyChanged("EquipmentId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UnitId {
            get {
                return this.UnitIdField;
            }
            set {
                if ((this.UnitIdField.Equals(value) != true)) {
                    this.UnitIdField = value;
                    this.RaisePropertyChanged("UnitId");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NonUniqEquipmentObject", Namespace="http://schemas.datacontract.org/2004/07/Server.Dal.SQL.DataObjects")]
    [System.SerializableAttribute()]
    public partial class NonUniqEquipmentObject : ReaderUtility.Dal.ServerService.DbObject {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UnitIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int kEquipmentIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Count {
            get {
                return this.CountField;
            }
            set {
                if ((this.CountField.Equals(value) != true)) {
                    this.CountField = value;
                    this.RaisePropertyChanged("Count");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UnitId {
            get {
                return this.UnitIdField;
            }
            set {
                if ((this.UnitIdField.Equals(value) != true)) {
                    this.UnitIdField = value;
                    this.RaisePropertyChanged("UnitId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int kEquipmentId {
            get {
                return this.kEquipmentIdField;
            }
            set {
                if ((this.kEquipmentIdField.Equals(value) != true)) {
                    this.kEquipmentIdField = value;
                    this.RaisePropertyChanged("kEquipmentId");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="kEquipment", Namespace="http://schemas.datacontract.org/2004/07/DAL.SQL.DataObjects")]
    [System.SerializableAttribute()]
    public partial class kEquipment : ReaderUtility.Dal.ServerService.DbObject {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int GroupIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IsUniqField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int GroupId {
            get {
                return this.GroupIdField;
            }
            set {
                if ((this.GroupIdField.Equals(value) != true)) {
                    this.GroupIdField = value;
                    this.RaisePropertyChanged("GroupId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IsUniq {
            get {
                return this.IsUniqField;
            }
            set {
                if ((this.IsUniqField.Equals(value) != true)) {
                    this.IsUniqField = value;
                    this.RaisePropertyChanged("IsUniq");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Change", Namespace="http://schemas.datacontract.org/2004/07/Init.DAL.Sync")]
    [System.SerializableAttribute()]
    public partial class Change : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ChangeTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] RawItemDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] RawItemKeyDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TypeNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ChangeTypeId {
            get {
                return this.ChangeTypeIdField;
            }
            set {
                if ((this.ChangeTypeIdField.Equals(value) != true)) {
                    this.ChangeTypeIdField = value;
                    this.RaisePropertyChanged("ChangeTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateTime {
            get {
                return this.DateTimeField;
            }
            set {
                if ((this.DateTimeField.Equals(value) != true)) {
                    this.DateTimeField = value;
                    this.RaisePropertyChanged("DateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] RawItemData {
            get {
                return this.RawItemDataField;
            }
            set {
                if ((object.ReferenceEquals(this.RawItemDataField, value) != true)) {
                    this.RawItemDataField = value;
                    this.RaisePropertyChanged("RawItemData");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] RawItemKeyData {
            get {
                return this.RawItemKeyDataField;
            }
            set {
                if ((object.ReferenceEquals(this.RawItemKeyDataField, value) != true)) {
                    this.RawItemKeyDataField = value;
                    this.RaisePropertyChanged("RawItemKeyData");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TypeName {
            get {
                return this.TypeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeNameField, value) != true)) {
                    this.TypeNameField = value;
                    this.RaisePropertyChanged("TypeName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TransferPartIdent", Namespace="http://schemas.datacontract.org/2004/07/Init.DAL.Sync.Transfer")]
    [System.SerializableAttribute()]
    public partial class TransferPartIdent : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PartNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ResourceIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PartNumber {
            get {
                return this.PartNumberField;
            }
            set {
                if ((this.PartNumberField.Equals(value) != true)) {
                    this.PartNumberField = value;
                    this.RaisePropertyChanged("PartNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ResourceId {
            get {
                return this.ResourceIdField;
            }
            set {
                if ((this.ResourceIdField.Equals(value) != true)) {
                    this.ResourceIdField = value;
                    this.RaisePropertyChanged("ResourceId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TransferPart", Namespace="http://schemas.datacontract.org/2004/07/Init.DAL.Sync.Transfer")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ReaderUtility.Dal.ServerService.Equipment))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ReaderUtility.Dal.ServerService.Group))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ReaderUtility.Dal.ServerService.Movement))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ReaderUtility.Dal.ServerService.kEquipment))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ReaderUtility.Dal.ServerService.kEquipment[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ReaderUtility.Dal.ServerService.Group[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ReaderUtility.Dal.ServerService.Equipment[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ReaderUtility.Dal.ServerService.Movement[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ReaderUtility.Dal.ServerService.DbObject))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ReaderUtility.Dal.ServerService.Store))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ReaderUtility.Dal.ServerService.Trip))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ReaderUtility.Dal.ServerService.TripComplectation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ReaderUtility.Dal.ServerService.Tag))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ReaderUtility.Dal.ServerService.GeoPoints))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ReaderUtility.Dal.ServerService.Store[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ReaderUtility.Dal.ServerService.Trip[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ReaderUtility.Dal.ServerService.TripComplectation[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ReaderUtility.Dal.ServerService.GeoPoints[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ReaderUtility.Dal.ServerService.Tag[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ReaderUtility.Dal.ServerService.kObject))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ReaderUtility.Dal.ServerService.kObject[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ReaderUtility.Dal.ServerService.Unit))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ReaderUtility.Dal.ServerService.Unit[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ReaderUtility.Dal.ServerService.UniqEquipmentObject))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ReaderUtility.Dal.ServerService.UniqEquipmentObject[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ReaderUtility.Dal.ServerService.NonUniqEquipmentObject))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ReaderUtility.Dal.ServerService.NonUniqEquipmentObject[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ReaderUtility.Dal.ServerService.Change))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ReaderUtility.Dal.ServerService.Change[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, object>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(object[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ReaderUtility.Dal.ServerService.TransferPartIdent))]
    public partial class TransferPart : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsLastField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private object[] ItemsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ReaderUtility.Dal.ServerService.TransferPartIdent TransferPartIdentField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsLast {
            get {
                return this.IsLastField;
            }
            set {
                if ((this.IsLastField.Equals(value) != true)) {
                    this.IsLastField = value;
                    this.RaisePropertyChanged("IsLast");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object[] Items {
            get {
                return this.ItemsField;
            }
            set {
                if ((object.ReferenceEquals(this.ItemsField, value) != true)) {
                    this.ItemsField = value;
                    this.RaisePropertyChanged("Items");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ReaderUtility.Dal.ServerService.TransferPartIdent TransferPartIdent {
            get {
                return this.TransferPartIdentField;
            }
            set {
                if ((object.ReferenceEquals(this.TransferPartIdentField, value) != true)) {
                    this.TransferPartIdentField = value;
                    this.RaisePropertyChanged("TransferPartIdent");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServerService.IServiceOperation")]
    public interface IServiceOperation {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/TestConnection", ReplyAction="http://tempuri.org/IServiceOperation/TestConnectionResponse")]
        void TestConnection();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/AddkEquipment", ReplyAction="http://tempuri.org/IServiceOperation/AddkEquipmentResponse")]
        void AddkEquipment(ReaderUtility.Dal.ServerService.kEquipment item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/EditkEquipment", ReplyAction="http://tempuri.org/IServiceOperation/EditkEquipmentResponse")]
        void EditkEquipment(ReaderUtility.Dal.ServerService.kEquipment item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/DeletekEquipment", ReplyAction="http://tempuri.org/IServiceOperation/DeletekEquipmentResponse")]
        void DeletekEquipment(ReaderUtility.Dal.ServerService.kEquipment item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/GetAllkEquipment", ReplyAction="http://tempuri.org/IServiceOperation/GetAllkEquipmentResponse")]
        ReaderUtility.Dal.ServerService.kEquipment[] GetAllkEquipment();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/AddGroup", ReplyAction="http://tempuri.org/IServiceOperation/AddGroupResponse")]
        void AddGroup(ReaderUtility.Dal.ServerService.Group item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/EditGroup", ReplyAction="http://tempuri.org/IServiceOperation/EditGroupResponse")]
        void EditGroup(ReaderUtility.Dal.ServerService.Group item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/DeleteGroup", ReplyAction="http://tempuri.org/IServiceOperation/DeleteGroupResponse")]
        void DeleteGroup(ReaderUtility.Dal.ServerService.Group item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/GetAllGroup", ReplyAction="http://tempuri.org/IServiceOperation/GetAllGroupResponse")]
        ReaderUtility.Dal.ServerService.Group[] GetAllGroup();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/AddStore", ReplyAction="http://tempuri.org/IServiceOperation/AddStoreResponse")]
        void AddStore(ReaderUtility.Dal.ServerService.Store item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/EditStore", ReplyAction="http://tempuri.org/IServiceOperation/EditStoreResponse")]
        void EditStore(ReaderUtility.Dal.ServerService.Store item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/DeleteStore", ReplyAction="http://tempuri.org/IServiceOperation/DeleteStoreResponse")]
        void DeleteStore(ReaderUtility.Dal.ServerService.Store item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/GetAllStore", ReplyAction="http://tempuri.org/IServiceOperation/GetAllStoreResponse")]
        ReaderUtility.Dal.ServerService.Store[] GetAllStore();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/AddTrip", ReplyAction="http://tempuri.org/IServiceOperation/AddTripResponse")]
        void AddTrip(ReaderUtility.Dal.ServerService.Trip item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/EditTrip", ReplyAction="http://tempuri.org/IServiceOperation/EditTripResponse")]
        void EditTrip(ReaderUtility.Dal.ServerService.Trip item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/DeleteTrip", ReplyAction="http://tempuri.org/IServiceOperation/DeleteTripResponse")]
        void DeleteTrip(ReaderUtility.Dal.ServerService.Trip item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/GetAllTrips", ReplyAction="http://tempuri.org/IServiceOperation/GetAllTripsResponse")]
        ReaderUtility.Dal.ServerService.Trip[] GetAllTrips();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/AddTripComplectation", ReplyAction="http://tempuri.org/IServiceOperation/AddTripComplectationResponse")]
        void AddTripComplectation(ReaderUtility.Dal.ServerService.TripComplectation item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/EditTripComplectation", ReplyAction="http://tempuri.org/IServiceOperation/EditTripComplectationResponse")]
        void EditTripComplectation(ReaderUtility.Dal.ServerService.TripComplectation item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/DeleteTripComplectation", ReplyAction="http://tempuri.org/IServiceOperation/DeleteTripComplectationResponse")]
        void DeleteTripComplectation(ReaderUtility.Dal.ServerService.TripComplectation item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/GetAllTripComplectations", ReplyAction="http://tempuri.org/IServiceOperation/GetAllTripComplectationsResponse")]
        ReaderUtility.Dal.ServerService.TripComplectation[] GetAllTripComplectations();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/AddEquipment", ReplyAction="http://tempuri.org/IServiceOperation/AddEquipmentResponse")]
        void AddEquipment(ReaderUtility.Dal.ServerService.Equipment item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/EditEquipment", ReplyAction="http://tempuri.org/IServiceOperation/EditEquipmentResponse")]
        void EditEquipment(ReaderUtility.Dal.ServerService.Equipment item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/DeleteEquipment", ReplyAction="http://tempuri.org/IServiceOperation/DeleteEquipmentResponse")]
        void DeleteEquipment(ReaderUtility.Dal.ServerService.Equipment item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/GetAllEquipment", ReplyAction="http://tempuri.org/IServiceOperation/GetAllEquipmentResponse")]
        ReaderUtility.Dal.ServerService.Equipment[] GetAllEquipment();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/GetComplectationByTripId", ReplyAction="http://tempuri.org/IServiceOperation/GetComplectationByTripIdResponse")]
        ReaderUtility.Dal.ServerService.Equipment[] GetComplectationByTripId(int tripId, bool isStart);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/AddMovement", ReplyAction="http://tempuri.org/IServiceOperation/AddMovementResponse")]
        void AddMovement(ReaderUtility.Dal.ServerService.Movement item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/EditMovement", ReplyAction="http://tempuri.org/IServiceOperation/EditMovementResponse")]
        void EditMovement(ReaderUtility.Dal.ServerService.Movement item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/DeleteMovement", ReplyAction="http://tempuri.org/IServiceOperation/DeleteMovementResponse")]
        void DeleteMovement(ReaderUtility.Dal.ServerService.Movement item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/GetAllMovement", ReplyAction="http://tempuri.org/IServiceOperation/GetAllMovementResponse")]
        ReaderUtility.Dal.ServerService.Movement[] GetAllMovement();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/AddGeoPoint", ReplyAction="http://tempuri.org/IServiceOperation/AddGeoPointResponse")]
        void AddGeoPoint(ReaderUtility.Dal.ServerService.GeoPoints item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/EditGeoPoint", ReplyAction="http://tempuri.org/IServiceOperation/EditGeoPointResponse")]
        void EditGeoPoint(ReaderUtility.Dal.ServerService.GeoPoints item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/DeleteGeoPoint", ReplyAction="http://tempuri.org/IServiceOperation/DeleteGeoPointResponse")]
        void DeleteGeoPoint(ReaderUtility.Dal.ServerService.GeoPoints item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/GetAllGeoPoints", ReplyAction="http://tempuri.org/IServiceOperation/GetAllGeoPointsResponse")]
        ReaderUtility.Dal.ServerService.GeoPoints[] GetAllGeoPoints();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/GetGeoPointListByTime", ReplyAction="http://tempuri.org/IServiceOperation/GetGeoPointListByTimeResponse")]
        ReaderUtility.Dal.ServerService.GeoPoints[] GetGeoPointListByTime(int itemId, System.DateTime minTime, System.DateTime maxTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/GetGeoPointListByTripId", ReplyAction="http://tempuri.org/IServiceOperation/GetGeoPointListByTripIdResponse")]
        ReaderUtility.Dal.ServerService.GeoPoints[] GetGeoPointListByTripId(int tripId, int idFrom, int count);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/AddTag", ReplyAction="http://tempuri.org/IServiceOperation/AddTagResponse")]
        void AddTag(ReaderUtility.Dal.ServerService.Tag item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/EditTag", ReplyAction="http://tempuri.org/IServiceOperation/EditTagResponse")]
        void EditTag(ReaderUtility.Dal.ServerService.Tag item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/DeleteTag", ReplyAction="http://tempuri.org/IServiceOperation/DeleteTagResponse")]
        void DeleteTag(ReaderUtility.Dal.ServerService.Tag item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/GetAllTags", ReplyAction="http://tempuri.org/IServiceOperation/GetAllTagsResponse")]
        ReaderUtility.Dal.ServerService.Tag[] GetAllTags();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/AddkObject", ReplyAction="http://tempuri.org/IServiceOperation/AddkObjectResponse")]
        void AddkObject(ReaderUtility.Dal.ServerService.kObject item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/EditkObject", ReplyAction="http://tempuri.org/IServiceOperation/EditkObjectResponse")]
        void EditkObject(ReaderUtility.Dal.ServerService.kObject item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/DeletekObject", ReplyAction="http://tempuri.org/IServiceOperation/DeletekObjectResponse")]
        void DeletekObject(ReaderUtility.Dal.ServerService.kObject item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/GetAllkObject", ReplyAction="http://tempuri.org/IServiceOperation/GetAllkObjectResponse")]
        ReaderUtility.Dal.ServerService.kObject[] GetAllkObject();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/AddUnit", ReplyAction="http://tempuri.org/IServiceOperation/AddUnitResponse")]
        void AddUnit(ReaderUtility.Dal.ServerService.Unit item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/EditUnit", ReplyAction="http://tempuri.org/IServiceOperation/EditUnitResponse")]
        void EditUnit(ReaderUtility.Dal.ServerService.Unit item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/DeleteUnit", ReplyAction="http://tempuri.org/IServiceOperation/DeleteUnitResponse")]
        void DeleteUnit(ReaderUtility.Dal.ServerService.Unit item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/GetAllUnit", ReplyAction="http://tempuri.org/IServiceOperation/GetAllUnitResponse")]
        ReaderUtility.Dal.ServerService.Unit[] GetAllUnit();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/GetСomplectationListByUnitId", ReplyAction="http://tempuri.org/IServiceOperation/GetСomplectationListByUnitIdResponse")]
        ReaderUtility.Dal.ServerService.Equipment[] GetСomplectationListByUnitId(int unitId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/GetLastTrip", ReplyAction="http://tempuri.org/IServiceOperation/GetLastTripResponse")]
        ReaderUtility.Dal.ServerService.Trip GetLastTrip(int unitId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/AddUniqEquipmentObject", ReplyAction="http://tempuri.org/IServiceOperation/AddUniqEquipmentObjectResponse")]
        void AddUniqEquipmentObject(ReaderUtility.Dal.ServerService.UniqEquipmentObject item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/EditUniqEquipmentObject", ReplyAction="http://tempuri.org/IServiceOperation/EditUniqEquipmentObjectResponse")]
        void EditUniqEquipmentObject(ReaderUtility.Dal.ServerService.UniqEquipmentObject item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/DeleteUniqEquipmentObject", ReplyAction="http://tempuri.org/IServiceOperation/DeleteUniqEquipmentObjectResponse")]
        void DeleteUniqEquipmentObject(ReaderUtility.Dal.ServerService.UniqEquipmentObject item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/GetAllUniqEquipmentObject", ReplyAction="http://tempuri.org/IServiceOperation/GetAllUniqEquipmentObjectResponse")]
        ReaderUtility.Dal.ServerService.UniqEquipmentObject[] GetAllUniqEquipmentObject();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/AddNonUniqEquipmentObject", ReplyAction="http://tempuri.org/IServiceOperation/AddNonUniqEquipmentObjectResponse")]
        void AddNonUniqEquipmentObject(ReaderUtility.Dal.ServerService.NonUniqEquipmentObject item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/EditNonUniqEquipmentObject", ReplyAction="http://tempuri.org/IServiceOperation/EditNonUniqEquipmentObjectResponse")]
        void EditNonUniqEquipmentObject(ReaderUtility.Dal.ServerService.NonUniqEquipmentObject item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/DeleteNonUniqEquipmentObject", ReplyAction="http://tempuri.org/IServiceOperation/DeleteNonUniqEquipmentObjectResponse")]
        void DeleteNonUniqEquipmentObject(ReaderUtility.Dal.ServerService.NonUniqEquipmentObject item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/GetAllNonUniqEquipmentObject", ReplyAction="http://tempuri.org/IServiceOperation/GetAllNonUniqEquipmentObjectResponse")]
        ReaderUtility.Dal.ServerService.NonUniqEquipmentObject[] GetAllNonUniqEquipmentObject();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/Count", ReplyAction="http://tempuri.org/IServiceOperation/CountResponse")]
        long Count(string typeName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/Add", ReplyAction="http://tempuri.org/IServiceOperation/AddResponse")]
        ReaderUtility.Dal.ServerService.Change Add(ReaderUtility.Dal.ServerService.Change item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/Edit", ReplyAction="http://tempuri.org/IServiceOperation/EditResponse")]
        ReaderUtility.Dal.ServerService.Change Edit(ReaderUtility.Dal.ServerService.Change item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/DeleteWhere", ReplyAction="http://tempuri.org/IServiceOperation/DeleteWhereResponse")]
        void DeleteWhere(ReaderUtility.Dal.ServerService.Change item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/GetItemsWhere", ReplyAction="http://tempuri.org/IServiceOperation/GetItemsWhereResponse")]
        ReaderUtility.Dal.ServerService.Change[] GetItemsWhere(string typeName, System.Collections.Generic.Dictionary<string, object> keys);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/TransferItems", ReplyAction="http://tempuri.org/IServiceOperation/TransferItemsResponse")]
        ReaderUtility.Dal.ServerService.TransferPart TransferItems(string typeName, ReaderUtility.Dal.ServerService.TransferPartIdent ident);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/GetPage", ReplyAction="http://tempuri.org/IServiceOperation/GetPageResponse")]
        ReaderUtility.Dal.ServerService.Change[] GetPage(string typeName, int pageIndex, int count);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceOperationChannel : ReaderUtility.Dal.ServerService.IServiceOperation, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceOperationClient : System.ServiceModel.ClientBase<ReaderUtility.Dal.ServerService.IServiceOperation>, ReaderUtility.Dal.ServerService.IServiceOperation {
        
        public ServiceOperationClient() {
        }
        
        public ServiceOperationClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceOperationClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceOperationClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceOperationClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void TestConnection() {
            base.Channel.TestConnection();
        }
        
        public void AddkEquipment(ReaderUtility.Dal.ServerService.kEquipment item) {
            base.Channel.AddkEquipment(item);
        }
        
        public void EditkEquipment(ReaderUtility.Dal.ServerService.kEquipment item) {
            base.Channel.EditkEquipment(item);
        }
        
        public void DeletekEquipment(ReaderUtility.Dal.ServerService.kEquipment item) {
            base.Channel.DeletekEquipment(item);
        }
        
        public ReaderUtility.Dal.ServerService.kEquipment[] GetAllkEquipment() {
            return base.Channel.GetAllkEquipment();
        }
        
        public void AddGroup(ReaderUtility.Dal.ServerService.Group item) {
            base.Channel.AddGroup(item);
        }
        
        public void EditGroup(ReaderUtility.Dal.ServerService.Group item) {
            base.Channel.EditGroup(item);
        }
        
        public void DeleteGroup(ReaderUtility.Dal.ServerService.Group item) {
            base.Channel.DeleteGroup(item);
        }
        
        public ReaderUtility.Dal.ServerService.Group[] GetAllGroup() {
            return base.Channel.GetAllGroup();
        }
        
        public void AddStore(ReaderUtility.Dal.ServerService.Store item) {
            base.Channel.AddStore(item);
        }
        
        public void EditStore(ReaderUtility.Dal.ServerService.Store item) {
            base.Channel.EditStore(item);
        }
        
        public void DeleteStore(ReaderUtility.Dal.ServerService.Store item) {
            base.Channel.DeleteStore(item);
        }
        
        public ReaderUtility.Dal.ServerService.Store[] GetAllStore() {
            return base.Channel.GetAllStore();
        }
        
        public void AddTrip(ReaderUtility.Dal.ServerService.Trip item) {
            base.Channel.AddTrip(item);
        }
        
        public void EditTrip(ReaderUtility.Dal.ServerService.Trip item) {
            base.Channel.EditTrip(item);
        }
        
        public void DeleteTrip(ReaderUtility.Dal.ServerService.Trip item) {
            base.Channel.DeleteTrip(item);
        }
        
        public ReaderUtility.Dal.ServerService.Trip[] GetAllTrips() {
            return base.Channel.GetAllTrips();
        }
        
        public void AddTripComplectation(ReaderUtility.Dal.ServerService.TripComplectation item) {
            base.Channel.AddTripComplectation(item);
        }
        
        public void EditTripComplectation(ReaderUtility.Dal.ServerService.TripComplectation item) {
            base.Channel.EditTripComplectation(item);
        }
        
        public void DeleteTripComplectation(ReaderUtility.Dal.ServerService.TripComplectation item) {
            base.Channel.DeleteTripComplectation(item);
        }
        
        public ReaderUtility.Dal.ServerService.TripComplectation[] GetAllTripComplectations() {
            return base.Channel.GetAllTripComplectations();
        }
        
        public void AddEquipment(ReaderUtility.Dal.ServerService.Equipment item) {
            base.Channel.AddEquipment(item);
        }
        
        public void EditEquipment(ReaderUtility.Dal.ServerService.Equipment item) {
            base.Channel.EditEquipment(item);
        }
        
        public void DeleteEquipment(ReaderUtility.Dal.ServerService.Equipment item) {
            base.Channel.DeleteEquipment(item);
        }
        
        public ReaderUtility.Dal.ServerService.Equipment[] GetAllEquipment() {
            return base.Channel.GetAllEquipment();
        }
        
        public ReaderUtility.Dal.ServerService.Equipment[] GetComplectationByTripId(int tripId, bool isStart) {
            return base.Channel.GetComplectationByTripId(tripId, isStart);
        }
        
        public void AddMovement(ReaderUtility.Dal.ServerService.Movement item) {
            base.Channel.AddMovement(item);
        }
        
        public void EditMovement(ReaderUtility.Dal.ServerService.Movement item) {
            base.Channel.EditMovement(item);
        }
        
        public void DeleteMovement(ReaderUtility.Dal.ServerService.Movement item) {
            base.Channel.DeleteMovement(item);
        }
        
        public ReaderUtility.Dal.ServerService.Movement[] GetAllMovement() {
            return base.Channel.GetAllMovement();
        }
        
        public void AddGeoPoint(ReaderUtility.Dal.ServerService.GeoPoints item) {
            base.Channel.AddGeoPoint(item);
        }
        
        public void EditGeoPoint(ReaderUtility.Dal.ServerService.GeoPoints item) {
            base.Channel.EditGeoPoint(item);
        }
        
        public void DeleteGeoPoint(ReaderUtility.Dal.ServerService.GeoPoints item) {
            base.Channel.DeleteGeoPoint(item);
        }
        
        public ReaderUtility.Dal.ServerService.GeoPoints[] GetAllGeoPoints() {
            return base.Channel.GetAllGeoPoints();
        }
        
        public ReaderUtility.Dal.ServerService.GeoPoints[] GetGeoPointListByTime(int itemId, System.DateTime minTime, System.DateTime maxTime) {
            return base.Channel.GetGeoPointListByTime(itemId, minTime, maxTime);
        }
        
        public ReaderUtility.Dal.ServerService.GeoPoints[] GetGeoPointListByTripId(int tripId, int idFrom, int count) {
            return base.Channel.GetGeoPointListByTripId(tripId, idFrom, count);
        }
        
        public void AddTag(ReaderUtility.Dal.ServerService.Tag item) {
            base.Channel.AddTag(item);
        }
        
        public void EditTag(ReaderUtility.Dal.ServerService.Tag item) {
            base.Channel.EditTag(item);
        }
        
        public void DeleteTag(ReaderUtility.Dal.ServerService.Tag item) {
            base.Channel.DeleteTag(item);
        }
        
        public ReaderUtility.Dal.ServerService.Tag[] GetAllTags() {
            return base.Channel.GetAllTags();
        }
        
        public void AddkObject(ReaderUtility.Dal.ServerService.kObject item) {
            base.Channel.AddkObject(item);
        }
        
        public void EditkObject(ReaderUtility.Dal.ServerService.kObject item) {
            base.Channel.EditkObject(item);
        }
        
        public void DeletekObject(ReaderUtility.Dal.ServerService.kObject item) {
            base.Channel.DeletekObject(item);
        }
        
        public ReaderUtility.Dal.ServerService.kObject[] GetAllkObject() {
            return base.Channel.GetAllkObject();
        }
        
        public void AddUnit(ReaderUtility.Dal.ServerService.Unit item) {
            base.Channel.AddUnit(item);
        }
        
        public void EditUnit(ReaderUtility.Dal.ServerService.Unit item) {
            base.Channel.EditUnit(item);
        }
        
        public void DeleteUnit(ReaderUtility.Dal.ServerService.Unit item) {
            base.Channel.DeleteUnit(item);
        }
        
        public ReaderUtility.Dal.ServerService.Unit[] GetAllUnit() {
            return base.Channel.GetAllUnit();
        }
        
        public ReaderUtility.Dal.ServerService.Equipment[] GetСomplectationListByUnitId(int unitId) {
            return base.Channel.GetСomplectationListByUnitId(unitId);
        }
        
        public ReaderUtility.Dal.ServerService.Trip GetLastTrip(int unitId) {
            return base.Channel.GetLastTrip(unitId);
        }
        
        public void AddUniqEquipmentObject(ReaderUtility.Dal.ServerService.UniqEquipmentObject item) {
            base.Channel.AddUniqEquipmentObject(item);
        }
        
        public void EditUniqEquipmentObject(ReaderUtility.Dal.ServerService.UniqEquipmentObject item) {
            base.Channel.EditUniqEquipmentObject(item);
        }
        
        public void DeleteUniqEquipmentObject(ReaderUtility.Dal.ServerService.UniqEquipmentObject item) {
            base.Channel.DeleteUniqEquipmentObject(item);
        }
        
        public ReaderUtility.Dal.ServerService.UniqEquipmentObject[] GetAllUniqEquipmentObject() {
            return base.Channel.GetAllUniqEquipmentObject();
        }
        
        public void AddNonUniqEquipmentObject(ReaderUtility.Dal.ServerService.NonUniqEquipmentObject item) {
            base.Channel.AddNonUniqEquipmentObject(item);
        }
        
        public void EditNonUniqEquipmentObject(ReaderUtility.Dal.ServerService.NonUniqEquipmentObject item) {
            base.Channel.EditNonUniqEquipmentObject(item);
        }
        
        public void DeleteNonUniqEquipmentObject(ReaderUtility.Dal.ServerService.NonUniqEquipmentObject item) {
            base.Channel.DeleteNonUniqEquipmentObject(item);
        }
        
        public ReaderUtility.Dal.ServerService.NonUniqEquipmentObject[] GetAllNonUniqEquipmentObject() {
            return base.Channel.GetAllNonUniqEquipmentObject();
        }
        
        public long Count(string typeName) {
            return base.Channel.Count(typeName);
        }
        
        public ReaderUtility.Dal.ServerService.Change Add(ReaderUtility.Dal.ServerService.Change item) {
            return base.Channel.Add(item);
        }
        
        public ReaderUtility.Dal.ServerService.Change Edit(ReaderUtility.Dal.ServerService.Change item) {
            return base.Channel.Edit(item);
        }
        
        public void DeleteWhere(ReaderUtility.Dal.ServerService.Change item) {
            base.Channel.DeleteWhere(item);
        }
        
        public ReaderUtility.Dal.ServerService.Change[] GetItemsWhere(string typeName, System.Collections.Generic.Dictionary<string, object> keys) {
            return base.Channel.GetItemsWhere(typeName, keys);
        }
        
        public ReaderUtility.Dal.ServerService.TransferPart TransferItems(string typeName, ReaderUtility.Dal.ServerService.TransferPartIdent ident) {
            return base.Channel.TransferItems(typeName, ident);
        }
        
        public ReaderUtility.Dal.ServerService.Change[] GetPage(string typeName, int pageIndex, int count) {
            return base.Channel.GetPage(typeName, pageIndex, count);
        }
    }
}

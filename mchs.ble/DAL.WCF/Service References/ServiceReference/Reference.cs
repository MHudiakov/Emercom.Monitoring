//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DAL.WCF.ServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="kEquipment", Namespace="http://schemas.datacontract.org/2004/07/DAL.SQL.DataObjects")]
    [System.SerializableAttribute()]
    public partial class kEquipment : Init.DbCore.DbObject, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int GroupIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsUniqField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int GroupId {
            get {
                return this.GroupIdField;
            }
            set {
                if ((this.GroupIdField.Equals(value) != true)) {
                    this.GroupIdField = value;
                    this.RaisePropertyChanged("GroupId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsUniq {
            get {
                return this.IsUniqField;
            }
            set {
                if ((this.IsUniqField.Equals(value) != true)) {
                    this.IsUniqField = value;
                    this.RaisePropertyChanged("IsUniq");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Equipment", Namespace="http://schemas.datacontract.org/2004/07/DAL.SQL.DataObjects")]
    [System.SerializableAttribute()]
    public partial class Equipment : Init.DbCore.DbObject, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> LastMovementIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TagIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int kEquipmentIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> LastMovementId {
            get {
                return this.LastMovementIdField;
            }
            set {
                if ((this.LastMovementIdField.Equals(value) != true)) {
                    this.LastMovementIdField = value;
                    this.RaisePropertyChanged("LastMovementId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TagId {
            get {
                return this.TagIdField;
            }
            set {
                if ((this.TagIdField.Equals(value) != true)) {
                    this.TagIdField = value;
                    this.RaisePropertyChanged("TagId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int kEquipmentId {
            get {
                return this.kEquipmentIdField;
            }
            set {
                if ((this.kEquipmentIdField.Equals(value) != true)) {
                    this.kEquipmentIdField = value;
                    this.RaisePropertyChanged("kEquipmentId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Group", Namespace="http://schemas.datacontract.org/2004/07/DAL.SQL.DataObjects")]
    [System.SerializableAttribute()]
    public partial class Group : Init.DbCore.DbObject, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ParentIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ParentId {
            get {
                return this.ParentIdField;
            }
            set {
                if ((this.ParentIdField.Equals(value) != true)) {
                    this.ParentIdField = value;
                    this.RaisePropertyChanged("ParentId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Movement", Namespace="http://schemas.datacontract.org/2004/07/DAL.SQL.DataObjects")]
    [System.SerializableAttribute()]
    public partial class Movement : Init.DbCore.DbObject, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateOfMovementField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> EquipmentIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsArrivedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UnitIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateOfMovement {
            get {
                return this.DateOfMovementField;
            }
            set {
                if ((this.DateOfMovementField.Equals(value) != true)) {
                    this.DateOfMovementField = value;
                    this.RaisePropertyChanged("DateOfMovement");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> EquipmentId {
            get {
                return this.EquipmentIdField;
            }
            set {
                if ((this.EquipmentIdField.Equals(value) != true)) {
                    this.EquipmentIdField = value;
                    this.RaisePropertyChanged("EquipmentId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsArrived {
            get {
                return this.IsArrivedField;
            }
            set {
                if ((this.IsArrivedField.Equals(value) != true)) {
                    this.IsArrivedField = value;
                    this.RaisePropertyChanged("IsArrived");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UnitId {
            get {
                return this.UnitIdField;
            }
            set {
                if ((this.UnitIdField.Equals(value) != true)) {
                    this.UnitIdField = value;
                    this.RaisePropertyChanged("UnitId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Store", Namespace="http://schemas.datacontract.org/2004/07/Server.Dal.SQL.DataObjects")]
    [System.SerializableAttribute()]
    public partial class Store : Init.DbCore.DbObject, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double LatitudeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double LongitudeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double RadiusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StoreBoundariesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Latitude {
            get {
                return this.LatitudeField;
            }
            set {
                if ((this.LatitudeField.Equals(value) != true)) {
                    this.LatitudeField = value;
                    this.RaisePropertyChanged("Latitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Longitude {
            get {
                return this.LongitudeField;
            }
            set {
                if ((this.LongitudeField.Equals(value) != true)) {
                    this.LongitudeField = value;
                    this.RaisePropertyChanged("Longitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Radius {
            get {
                return this.RadiusField;
            }
            set {
                if ((this.RadiusField.Equals(value) != true)) {
                    this.RadiusField = value;
                    this.RaisePropertyChanged("Radius");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StoreBoundaries {
            get {
                return this.StoreBoundariesField;
            }
            set {
                if ((object.ReferenceEquals(this.StoreBoundariesField, value) != true)) {
                    this.StoreBoundariesField = value;
                    this.RaisePropertyChanged("StoreBoundaries");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Trip", Namespace="http://schemas.datacontract.org/2004/07/Server.Dal.SQL.DataObjects")]
    [System.SerializableAttribute()]
    public partial class Trip : Init.DbCore.DbObject, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime EndTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime StartTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UnitIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime EndTime {
            get {
                return this.EndTimeField;
            }
            set {
                if ((this.EndTimeField.Equals(value) != true)) {
                    this.EndTimeField = value;
                    this.RaisePropertyChanged("EndTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime StartTime {
            get {
                return this.StartTimeField;
            }
            set {
                if ((this.StartTimeField.Equals(value) != true)) {
                    this.StartTimeField = value;
                    this.RaisePropertyChanged("StartTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UnitId {
            get {
                return this.UnitIdField;
            }
            set {
                if ((this.UnitIdField.Equals(value) != true)) {
                    this.UnitIdField = value;
                    this.RaisePropertyChanged("UnitId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TripComplectation", Namespace="http://schemas.datacontract.org/2004/07/Server.Dal.SQL.DataObjects")]
    [System.SerializableAttribute()]
    public partial class TripComplectation : Init.DbCore.DbObject, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int EquipmentIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsStartField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TripIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EquipmentId {
            get {
                return this.EquipmentIdField;
            }
            set {
                if ((this.EquipmentIdField.Equals(value) != true)) {
                    this.EquipmentIdField = value;
                    this.RaisePropertyChanged("EquipmentId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsStart {
            get {
                return this.IsStartField;
            }
            set {
                if ((this.IsStartField.Equals(value) != true)) {
                    this.IsStartField = value;
                    this.RaisePropertyChanged("IsStart");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TripId {
            get {
                return this.TripIdField;
            }
            set {
                if ((this.TripIdField.Equals(value) != true)) {
                    this.TripIdField = value;
                    this.RaisePropertyChanged("TripId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Tag", Namespace="http://schemas.datacontract.org/2004/07/Server.Dal.SQL.DataObjects")]
    [System.SerializableAttribute()]
    public partial class Tag : Init.DbCore.DbObject, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> EquipmentIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RfidField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> EquipmentId {
            get {
                return this.EquipmentIdField;
            }
            set {
                if ((this.EquipmentIdField.Equals(value) != true)) {
                    this.EquipmentIdField = value;
                    this.RaisePropertyChanged("EquipmentId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Rfid {
            get {
                return this.RfidField;
            }
            set {
                if ((object.ReferenceEquals(this.RfidField, value) != true)) {
                    this.RfidField = value;
                    this.RaisePropertyChanged("Rfid");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GeoPoints", Namespace="http://schemas.datacontract.org/2004/07/Server.Dal.SQL.DataObjects")]
    [System.SerializableAttribute()]
    public partial class GeoPoints : Init.DbCore.DbObject, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double LatitudeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double LongitudeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double SpeedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime TimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TripIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UnitIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Latitude {
            get {
                return this.LatitudeField;
            }
            set {
                if ((this.LatitudeField.Equals(value) != true)) {
                    this.LatitudeField = value;
                    this.RaisePropertyChanged("Latitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Longitude {
            get {
                return this.LongitudeField;
            }
            set {
                if ((this.LongitudeField.Equals(value) != true)) {
                    this.LongitudeField = value;
                    this.RaisePropertyChanged("Longitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Speed {
            get {
                return this.SpeedField;
            }
            set {
                if ((this.SpeedField.Equals(value) != true)) {
                    this.SpeedField = value;
                    this.RaisePropertyChanged("Speed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Time {
            get {
                return this.TimeField;
            }
            set {
                if ((this.TimeField.Equals(value) != true)) {
                    this.TimeField = value;
                    this.RaisePropertyChanged("Time");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TripId {
            get {
                return this.TripIdField;
            }
            set {
                if ((this.TripIdField.Equals(value) != true)) {
                    this.TripIdField = value;
                    this.RaisePropertyChanged("TripId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UnitId {
            get {
                return this.UnitIdField;
            }
            set {
                if ((this.UnitIdField.Equals(value) != true)) {
                    this.UnitIdField = value;
                    this.RaisePropertyChanged("UnitId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="kObject", Namespace="http://schemas.datacontract.org/2004/07/Server.Dal.SQL.DataObjects")]
    [System.SerializableAttribute()]
    public partial class kObject : Init.DbCore.DbObject, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsStoreField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsStore {
            get {
                return this.IsStoreField;
            }
            set {
                if ((this.IsStoreField.Equals(value) != true)) {
                    this.IsStoreField = value;
                    this.RaisePropertyChanged("IsStore");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeField, value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Unit", Namespace="http://schemas.datacontract.org/2004/07/Server.Dal.SQL.DataObjects")]
    [System.SerializableAttribute()]
    public partial class Unit : Init.DbCore.DbObject, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BortNumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GosNumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SerialNumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int kObjectIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BortNum {
            get {
                return this.BortNumField;
            }
            set {
                if ((object.ReferenceEquals(this.BortNumField, value) != true)) {
                    this.BortNumField = value;
                    this.RaisePropertyChanged("BortNum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GosNum {
            get {
                return this.GosNumField;
            }
            set {
                if ((object.ReferenceEquals(this.GosNumField, value) != true)) {
                    this.GosNumField = value;
                    this.RaisePropertyChanged("GosNum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SerialNum {
            get {
                return this.SerialNumField;
            }
            set {
                if ((object.ReferenceEquals(this.SerialNumField, value) != true)) {
                    this.SerialNumField = value;
                    this.RaisePropertyChanged("SerialNum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int kObjectId {
            get {
                return this.kObjectIdField;
            }
            set {
                if ((this.kObjectIdField.Equals(value) != true)) {
                    this.kObjectIdField = value;
                    this.RaisePropertyChanged("kObjectId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UniqEquipmentObject", Namespace="http://schemas.datacontract.org/2004/07/Server.Dal.SQL.DataObjects")]
    [System.SerializableAttribute()]
    public partial class UniqEquipmentObject : Init.DbCore.DbObject, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int EquipmentIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UnitIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EquipmentId {
            get {
                return this.EquipmentIdField;
            }
            set {
                if ((this.EquipmentIdField.Equals(value) != true)) {
                    this.EquipmentIdField = value;
                    this.RaisePropertyChanged("EquipmentId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UnitId {
            get {
                return this.UnitIdField;
            }
            set {
                if ((this.UnitIdField.Equals(value) != true)) {
                    this.UnitIdField = value;
                    this.RaisePropertyChanged("UnitId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NonUniqEquipmentObject", Namespace="http://schemas.datacontract.org/2004/07/Server.Dal.SQL.DataObjects")]
    [System.SerializableAttribute()]
    public partial class NonUniqEquipmentObject : Init.DbCore.DbObject, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UnitIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int kEquipmentIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Count {
            get {
                return this.CountField;
            }
            set {
                if ((this.CountField.Equals(value) != true)) {
                    this.CountField = value;
                    this.RaisePropertyChanged("Count");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UnitId {
            get {
                return this.UnitIdField;
            }
            set {
                if ((this.UnitIdField.Equals(value) != true)) {
                    this.UnitIdField = value;
                    this.RaisePropertyChanged("UnitId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int kEquipmentId {
            get {
                return this.kEquipmentIdField;
            }
            set {
                if ((this.kEquipmentIdField.Equals(value) != true)) {
                    this.kEquipmentIdField = value;
                    this.RaisePropertyChanged("kEquipmentId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IServiceOperation")]
    public interface IServiceOperation {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/TestConnection", ReplyAction="http://tempuri.org/IServiceOperation/TestConnectionResponse")]
        void TestConnection();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/AddkEquipment", ReplyAction="http://tempuri.org/IServiceOperation/AddkEquipmentResponse")]
        void AddkEquipment(DAL.WCF.ServiceReference.kEquipment item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/EditkEquipment", ReplyAction="http://tempuri.org/IServiceOperation/EditkEquipmentResponse")]
        void EditkEquipment(DAL.WCF.ServiceReference.kEquipment item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/DeletekEquipment", ReplyAction="http://tempuri.org/IServiceOperation/DeletekEquipmentResponse")]
        void DeletekEquipment(DAL.WCF.ServiceReference.kEquipment item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/GetAllkEquipment", ReplyAction="http://tempuri.org/IServiceOperation/GetAllkEquipmentResponse")]
        System.Collections.Generic.List<DAL.WCF.ServiceReference.kEquipment> GetAllkEquipment();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/AddGroup", ReplyAction="http://tempuri.org/IServiceOperation/AddGroupResponse")]
        void AddGroup(DAL.WCF.ServiceReference.Group item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/EditGroup", ReplyAction="http://tempuri.org/IServiceOperation/EditGroupResponse")]
        void EditGroup(DAL.WCF.ServiceReference.Group item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/DeleteGroup", ReplyAction="http://tempuri.org/IServiceOperation/DeleteGroupResponse")]
        void DeleteGroup(DAL.WCF.ServiceReference.Group item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/GetAllGroup", ReplyAction="http://tempuri.org/IServiceOperation/GetAllGroupResponse")]
        System.Collections.Generic.List<DAL.WCF.ServiceReference.Group> GetAllGroup();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/AddStore", ReplyAction="http://tempuri.org/IServiceOperation/AddStoreResponse")]
        void AddStore(DAL.WCF.ServiceReference.Store item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/EditStore", ReplyAction="http://tempuri.org/IServiceOperation/EditStoreResponse")]
        void EditStore(DAL.WCF.ServiceReference.Store item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/DeleteStore", ReplyAction="http://tempuri.org/IServiceOperation/DeleteStoreResponse")]
        void DeleteStore(DAL.WCF.ServiceReference.Store item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/GetAllStore", ReplyAction="http://tempuri.org/IServiceOperation/GetAllStoreResponse")]
        System.Collections.Generic.List<DAL.WCF.ServiceReference.Store> GetAllStore();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/GetAllTrips", ReplyAction="http://tempuri.org/IServiceOperation/GetAllTripsResponse")]
        System.Collections.Generic.List<DAL.WCF.ServiceReference.Trip> GetAllTrips();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/GetAllTripComplectations", ReplyAction="http://tempuri.org/IServiceOperation/GetAllTripComplectationsResponse")]
        System.Collections.Generic.List<DAL.WCF.ServiceReference.TripComplectation> GetAllTripComplectations();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/AddEquipment", ReplyAction="http://tempuri.org/IServiceOperation/AddEquipmentResponse")]
        void AddEquipment(DAL.WCF.ServiceReference.Equipment item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/EditEquipment", ReplyAction="http://tempuri.org/IServiceOperation/EditEquipmentResponse")]
        void EditEquipment(DAL.WCF.ServiceReference.Equipment item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/DeleteEquipment", ReplyAction="http://tempuri.org/IServiceOperation/DeleteEquipmentResponse")]
        void DeleteEquipment(DAL.WCF.ServiceReference.Equipment item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/GetAllEquipment", ReplyAction="http://tempuri.org/IServiceOperation/GetAllEquipmentResponse")]
        System.Collections.Generic.List<DAL.WCF.ServiceReference.Equipment> GetAllEquipment();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/GetComplectationByTripId", ReplyAction="http://tempuri.org/IServiceOperation/GetComplectationByTripIdResponse")]
        System.Collections.Generic.List<DAL.WCF.ServiceReference.Equipment> GetComplectationByTripId(int tripId, bool isStart);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/AddMovement", ReplyAction="http://tempuri.org/IServiceOperation/AddMovementResponse")]
        void AddMovement(DAL.WCF.ServiceReference.Movement item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/GetLastMovements", ReplyAction="http://tempuri.org/IServiceOperation/GetLastMovementsResponse")]
        System.Collections.Generic.List<DAL.WCF.ServiceReference.Movement> GetLastMovements();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/EditMovement", ReplyAction="http://tempuri.org/IServiceOperation/EditMovementResponse")]
        void EditMovement(DAL.WCF.ServiceReference.Movement item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/DeleteMovement", ReplyAction="http://tempuri.org/IServiceOperation/DeleteMovementResponse")]
        void DeleteMovement(DAL.WCF.ServiceReference.Movement item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/GetAllMovement", ReplyAction="http://tempuri.org/IServiceOperation/GetAllMovementResponse")]
        System.Collections.Generic.List<DAL.WCF.ServiceReference.Movement> GetAllMovement();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/GetMovementListByTripId", ReplyAction="http://tempuri.org/IServiceOperation/GetMovementListByTripIdResponse")]
        System.Collections.Generic.List<DAL.WCF.ServiceReference.Movement> GetMovementListByTripId(int tripId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/GetMovementListByEquipmentId", ReplyAction="http://tempuri.org/IServiceOperation/GetMovementListByEquipmentIdResponse")]
        System.Collections.Generic.List<DAL.WCF.ServiceReference.Movement> GetMovementListByEquipmentId(System.Nullable<int> equipmentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/GetMovementListByTimeAndUnitId", ReplyAction="http://tempuri.org/IServiceOperation/GetMovementListByTimeAndUnitIdResponse")]
        System.Collections.Generic.List<DAL.WCF.ServiceReference.Movement> GetMovementListByTimeAndUnitId(System.DateTime minTime, System.DateTime maxTime, int unitId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/GetMovement", ReplyAction="http://tempuri.org/IServiceOperation/GetMovementResponse")]
        DAL.WCF.ServiceReference.Movement GetMovement(System.Nullable<int> id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/AddGeoPoint", ReplyAction="http://tempuri.org/IServiceOperation/AddGeoPointResponse")]
        void AddGeoPoint(DAL.WCF.ServiceReference.GeoPoints item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/GetAllGeoPoints", ReplyAction="http://tempuri.org/IServiceOperation/GetAllGeoPointsResponse")]
        System.Collections.Generic.List<DAL.WCF.ServiceReference.GeoPoints> GetAllGeoPoints();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/GetGeoPointListByTime", ReplyAction="http://tempuri.org/IServiceOperation/GetGeoPointListByTimeResponse")]
        System.Collections.Generic.List<DAL.WCF.ServiceReference.GeoPoints> GetGeoPointListByTime(int itemId, System.DateTime minTime, System.DateTime maxTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/GetGeoPointListByTripId", ReplyAction="http://tempuri.org/IServiceOperation/GetGeoPointListByTripIdResponse")]
        System.Collections.Generic.List<DAL.WCF.ServiceReference.GeoPoints> GetGeoPointListByTripId(int tripId, int idFrom, int count);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/AddTag", ReplyAction="http://tempuri.org/IServiceOperation/AddTagResponse")]
        void AddTag(DAL.WCF.ServiceReference.Tag item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/EditTag", ReplyAction="http://tempuri.org/IServiceOperation/EditTagResponse")]
        void EditTag(DAL.WCF.ServiceReference.Tag item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/DeleteTag", ReplyAction="http://tempuri.org/IServiceOperation/DeleteTagResponse")]
        void DeleteTag(DAL.WCF.ServiceReference.Tag item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/GetAllTags", ReplyAction="http://tempuri.org/IServiceOperation/GetAllTagsResponse")]
        System.Collections.Generic.List<DAL.WCF.ServiceReference.Tag> GetAllTags();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/AddkObject", ReplyAction="http://tempuri.org/IServiceOperation/AddkObjectResponse")]
        void AddkObject(DAL.WCF.ServiceReference.kObject item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/EditkObject", ReplyAction="http://tempuri.org/IServiceOperation/EditkObjectResponse")]
        void EditkObject(DAL.WCF.ServiceReference.kObject item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/DeletekObject", ReplyAction="http://tempuri.org/IServiceOperation/DeletekObjectResponse")]
        void DeletekObject(DAL.WCF.ServiceReference.kObject item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/GetAllkObject", ReplyAction="http://tempuri.org/IServiceOperation/GetAllkObjectResponse")]
        System.Collections.Generic.List<DAL.WCF.ServiceReference.kObject> GetAllkObject();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/AddUnit", ReplyAction="http://tempuri.org/IServiceOperation/AddUnitResponse")]
        void AddUnit(DAL.WCF.ServiceReference.Unit item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/EditUnit", ReplyAction="http://tempuri.org/IServiceOperation/EditUnitResponse")]
        void EditUnit(DAL.WCF.ServiceReference.Unit item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/DeleteUnit", ReplyAction="http://tempuri.org/IServiceOperation/DeleteUnitResponse")]
        void DeleteUnit(DAL.WCF.ServiceReference.Unit item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/GetAllUnit", ReplyAction="http://tempuri.org/IServiceOperation/GetAllUnitResponse")]
        System.Collections.Generic.List<DAL.WCF.ServiceReference.Unit> GetAllUnit();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/GetСomplectationListByUnitId", ReplyAction="http://tempuri.org/IServiceOperation/GetСomplectationListByUnitIdResponse")]
        System.Collections.Generic.List<DAL.WCF.ServiceReference.Equipment> GetСomplectationListByUnitId(int unitId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/GetLastTrip", ReplyAction="http://tempuri.org/IServiceOperation/GetLastTripResponse")]
        DAL.WCF.ServiceReference.Trip GetLastTrip(int unitId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/AddUniqEquipmentObject", ReplyAction="http://tempuri.org/IServiceOperation/AddUniqEquipmentObjectResponse")]
        void AddUniqEquipmentObject(DAL.WCF.ServiceReference.UniqEquipmentObject item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/EditUniqEquipmentObject", ReplyAction="http://tempuri.org/IServiceOperation/EditUniqEquipmentObjectResponse")]
        void EditUniqEquipmentObject(DAL.WCF.ServiceReference.UniqEquipmentObject item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/DeleteUniqEquipmentObject", ReplyAction="http://tempuri.org/IServiceOperation/DeleteUniqEquipmentObjectResponse")]
        void DeleteUniqEquipmentObject(DAL.WCF.ServiceReference.UniqEquipmentObject item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/GetAllUniqEquipmentObject", ReplyAction="http://tempuri.org/IServiceOperation/GetAllUniqEquipmentObjectResponse")]
        System.Collections.Generic.List<DAL.WCF.ServiceReference.UniqEquipmentObject> GetAllUniqEquipmentObject();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/GetUniqEquipmentObjectListByUnitId", ReplyAction="http://tempuri.org/IServiceOperation/GetUniqEquipmentObjectListByUnitIdResponse")]
        System.Collections.Generic.List<DAL.WCF.ServiceReference.UniqEquipmentObject> GetUniqEquipmentObjectListByUnitId(int unitId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/AddNonUniqEquipmentObject", ReplyAction="http://tempuri.org/IServiceOperation/AddNonUniqEquipmentObjectResponse")]
        void AddNonUniqEquipmentObject(DAL.WCF.ServiceReference.NonUniqEquipmentObject item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/EditNonUniqEquipmentObject", ReplyAction="http://tempuri.org/IServiceOperation/EditNonUniqEquipmentObjectResponse")]
        void EditNonUniqEquipmentObject(DAL.WCF.ServiceReference.NonUniqEquipmentObject item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/DeleteNonUniqEquipmentObject", ReplyAction="http://tempuri.org/IServiceOperation/DeleteNonUniqEquipmentObjectResponse")]
        void DeleteNonUniqEquipmentObject(DAL.WCF.ServiceReference.NonUniqEquipmentObject item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/GetAllNonUniqEquipmentObject", ReplyAction="http://tempuri.org/IServiceOperation/GetAllNonUniqEquipmentObjectResponse")]
        System.Collections.Generic.List<DAL.WCF.ServiceReference.NonUniqEquipmentObject> GetAllNonUniqEquipmentObject();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/GetNonUniqEquipmentListObjectByUnitId", ReplyAction="http://tempuri.org/IServiceOperation/GetNonUniqEquipmentListObjectByUnitIdRespons" +
            "e")]
        System.Collections.Generic.List<DAL.WCF.ServiceReference.NonUniqEquipmentObject> GetNonUniqEquipmentListObjectByUnitId(int unitId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/Count", ReplyAction="http://tempuri.org/IServiceOperation/CountResponse")]
        long Count(string typeName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/Add", ReplyAction="http://tempuri.org/IServiceOperation/AddResponse")]
        Init.DAL.Sync.Change Add(Init.DAL.Sync.Change item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/Edit", ReplyAction="http://tempuri.org/IServiceOperation/EditResponse")]
        Init.DAL.Sync.Change Edit(Init.DAL.Sync.Change item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/DeleteWhere", ReplyAction="http://tempuri.org/IServiceOperation/DeleteWhereResponse")]
        void DeleteWhere(Init.DAL.Sync.Change item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/GetItemsWhere", ReplyAction="http://tempuri.org/IServiceOperation/GetItemsWhereResponse")]
        System.Collections.Generic.List<Init.DAL.Sync.Change> GetItemsWhere(string typeName, System.Collections.Generic.Dictionary<string, object> keys);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/TransferItems", ReplyAction="http://tempuri.org/IServiceOperation/TransferItemsResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DAL.WCF.ServiceReference.Equipment))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DAL.WCF.ServiceReference.Group))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DAL.WCF.ServiceReference.Movement))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DAL.WCF.ServiceReference.kEquipment))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<DAL.WCF.ServiceReference.kEquipment>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<DAL.WCF.ServiceReference.Group>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<DAL.WCF.ServiceReference.Equipment>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<DAL.WCF.ServiceReference.Movement>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Init.DbCore.DbObject))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DAL.WCF.ServiceReference.Store))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DAL.WCF.ServiceReference.Trip))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DAL.WCF.ServiceReference.TripComplectation))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DAL.WCF.ServiceReference.Tag))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DAL.WCF.ServiceReference.GeoPoints))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<DAL.WCF.ServiceReference.Store>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<DAL.WCF.ServiceReference.Trip>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<DAL.WCF.ServiceReference.TripComplectation>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<DAL.WCF.ServiceReference.GeoPoints>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<DAL.WCF.ServiceReference.Tag>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DAL.WCF.ServiceReference.kObject))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<DAL.WCF.ServiceReference.kObject>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DAL.WCF.ServiceReference.Unit))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<DAL.WCF.ServiceReference.Unit>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DAL.WCF.ServiceReference.UniqEquipmentObject))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<DAL.WCF.ServiceReference.UniqEquipmentObject>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DAL.WCF.ServiceReference.NonUniqEquipmentObject))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<DAL.WCF.ServiceReference.NonUniqEquipmentObject>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Init.DAL.Sync.Change))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<Init.DAL.Sync.Change>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, object>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<object>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Init.DAL.Sync.Transfer.TransferPartIdent))]
        Init.DAL.Sync.Transfer.TransferPart TransferItems(string typeName, Init.DAL.Sync.Transfer.TransferPartIdent ident);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOperation/GetPage", ReplyAction="http://tempuri.org/IServiceOperation/GetPageResponse")]
        System.Collections.Generic.List<Init.DAL.Sync.Change> GetPage(string typeName, int pageIndex, int count);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceOperationChannel : DAL.WCF.ServiceReference.IServiceOperation, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceOperationClient : System.ServiceModel.ClientBase<DAL.WCF.ServiceReference.IServiceOperation>, DAL.WCF.ServiceReference.IServiceOperation {
        
        public ServiceOperationClient() {
        }
        
        public ServiceOperationClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceOperationClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceOperationClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceOperationClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void TestConnection() {
            base.Channel.TestConnection();
        }
        
        public void AddkEquipment(DAL.WCF.ServiceReference.kEquipment item) {
            base.Channel.AddkEquipment(item);
        }
        
        public void EditkEquipment(DAL.WCF.ServiceReference.kEquipment item) {
            base.Channel.EditkEquipment(item);
        }
        
        public void DeletekEquipment(DAL.WCF.ServiceReference.kEquipment item) {
            base.Channel.DeletekEquipment(item);
        }
        
        public System.Collections.Generic.List<DAL.WCF.ServiceReference.kEquipment> GetAllkEquipment() {
            return base.Channel.GetAllkEquipment();
        }
        
        public void AddGroup(DAL.WCF.ServiceReference.Group item) {
            base.Channel.AddGroup(item);
        }
        
        public void EditGroup(DAL.WCF.ServiceReference.Group item) {
            base.Channel.EditGroup(item);
        }
        
        public void DeleteGroup(DAL.WCF.ServiceReference.Group item) {
            base.Channel.DeleteGroup(item);
        }
        
        public System.Collections.Generic.List<DAL.WCF.ServiceReference.Group> GetAllGroup() {
            return base.Channel.GetAllGroup();
        }
        
        public void AddStore(DAL.WCF.ServiceReference.Store item) {
            base.Channel.AddStore(item);
        }
        
        public void EditStore(DAL.WCF.ServiceReference.Store item) {
            base.Channel.EditStore(item);
        }
        
        public void DeleteStore(DAL.WCF.ServiceReference.Store item) {
            base.Channel.DeleteStore(item);
        }
        
        public System.Collections.Generic.List<DAL.WCF.ServiceReference.Store> GetAllStore() {
            return base.Channel.GetAllStore();
        }
        
        public System.Collections.Generic.List<DAL.WCF.ServiceReference.Trip> GetAllTrips() {
            return base.Channel.GetAllTrips();
        }
        
        public System.Collections.Generic.List<DAL.WCF.ServiceReference.TripComplectation> GetAllTripComplectations() {
            return base.Channel.GetAllTripComplectations();
        }
        
        public void AddEquipment(DAL.WCF.ServiceReference.Equipment item) {
            base.Channel.AddEquipment(item);
        }
        
        public void EditEquipment(DAL.WCF.ServiceReference.Equipment item) {
            base.Channel.EditEquipment(item);
        }
        
        public void DeleteEquipment(DAL.WCF.ServiceReference.Equipment item) {
            base.Channel.DeleteEquipment(item);
        }
        
        public System.Collections.Generic.List<DAL.WCF.ServiceReference.Equipment> GetAllEquipment() {
            return base.Channel.GetAllEquipment();
        }
        
        public System.Collections.Generic.List<DAL.WCF.ServiceReference.Equipment> GetComplectationByTripId(int tripId, bool isStart) {
            return base.Channel.GetComplectationByTripId(tripId, isStart);
        }
        
        public void AddMovement(DAL.WCF.ServiceReference.Movement item) {
            base.Channel.AddMovement(item);
        }
        
        public System.Collections.Generic.List<DAL.WCF.ServiceReference.Movement> GetLastMovements() {
            return base.Channel.GetLastMovements();
        }
        
        public void EditMovement(DAL.WCF.ServiceReference.Movement item) {
            base.Channel.EditMovement(item);
        }
        
        public void DeleteMovement(DAL.WCF.ServiceReference.Movement item) {
            base.Channel.DeleteMovement(item);
        }
        
        public System.Collections.Generic.List<DAL.WCF.ServiceReference.Movement> GetAllMovement() {
            return base.Channel.GetAllMovement();
        }
        
        public System.Collections.Generic.List<DAL.WCF.ServiceReference.Movement> GetMovementListByTripId(int tripId) {
            return base.Channel.GetMovementListByTripId(tripId);
        }
        
        public System.Collections.Generic.List<DAL.WCF.ServiceReference.Movement> GetMovementListByEquipmentId(System.Nullable<int> equipmentId) {
            return base.Channel.GetMovementListByEquipmentId(equipmentId);
        }
        
        public System.Collections.Generic.List<DAL.WCF.ServiceReference.Movement> GetMovementListByTimeAndUnitId(System.DateTime minTime, System.DateTime maxTime, int unitId) {
            return base.Channel.GetMovementListByTimeAndUnitId(minTime, maxTime, unitId);
        }
        
        public DAL.WCF.ServiceReference.Movement GetMovement(System.Nullable<int> id) {
            return base.Channel.GetMovement(id);
        }
        
        public void AddGeoPoint(DAL.WCF.ServiceReference.GeoPoints item) {
            base.Channel.AddGeoPoint(item);
        }
        
        public System.Collections.Generic.List<DAL.WCF.ServiceReference.GeoPoints> GetAllGeoPoints() {
            return base.Channel.GetAllGeoPoints();
        }
        
        public System.Collections.Generic.List<DAL.WCF.ServiceReference.GeoPoints> GetGeoPointListByTime(int itemId, System.DateTime minTime, System.DateTime maxTime) {
            return base.Channel.GetGeoPointListByTime(itemId, minTime, maxTime);
        }
        
        public System.Collections.Generic.List<DAL.WCF.ServiceReference.GeoPoints> GetGeoPointListByTripId(int tripId, int idFrom, int count) {
            return base.Channel.GetGeoPointListByTripId(tripId, idFrom, count);
        }
        
        public void AddTag(DAL.WCF.ServiceReference.Tag item) {
            base.Channel.AddTag(item);
        }
        
        public void EditTag(DAL.WCF.ServiceReference.Tag item) {
            base.Channel.EditTag(item);
        }
        
        public void DeleteTag(DAL.WCF.ServiceReference.Tag item) {
            base.Channel.DeleteTag(item);
        }
        
        public System.Collections.Generic.List<DAL.WCF.ServiceReference.Tag> GetAllTags() {
            return base.Channel.GetAllTags();
        }
        
        public void AddkObject(DAL.WCF.ServiceReference.kObject item) {
            base.Channel.AddkObject(item);
        }
        
        public void EditkObject(DAL.WCF.ServiceReference.kObject item) {
            base.Channel.EditkObject(item);
        }
        
        public void DeletekObject(DAL.WCF.ServiceReference.kObject item) {
            base.Channel.DeletekObject(item);
        }
        
        public System.Collections.Generic.List<DAL.WCF.ServiceReference.kObject> GetAllkObject() {
            return base.Channel.GetAllkObject();
        }
        
        public void AddUnit(DAL.WCF.ServiceReference.Unit item) {
            base.Channel.AddUnit(item);
        }
        
        public void EditUnit(DAL.WCF.ServiceReference.Unit item) {
            base.Channel.EditUnit(item);
        }
        
        public void DeleteUnit(DAL.WCF.ServiceReference.Unit item) {
            base.Channel.DeleteUnit(item);
        }
        
        public System.Collections.Generic.List<DAL.WCF.ServiceReference.Unit> GetAllUnit() {
            return base.Channel.GetAllUnit();
        }
        
        public System.Collections.Generic.List<DAL.WCF.ServiceReference.Equipment> GetСomplectationListByUnitId(int unitId) {
            return base.Channel.GetСomplectationListByUnitId(unitId);
        }
        
        public DAL.WCF.ServiceReference.Trip GetLastTrip(int unitId) {
            return base.Channel.GetLastTrip(unitId);
        }
        
        public void AddUniqEquipmentObject(DAL.WCF.ServiceReference.UniqEquipmentObject item) {
            base.Channel.AddUniqEquipmentObject(item);
        }
        
        public void EditUniqEquipmentObject(DAL.WCF.ServiceReference.UniqEquipmentObject item) {
            base.Channel.EditUniqEquipmentObject(item);
        }
        
        public void DeleteUniqEquipmentObject(DAL.WCF.ServiceReference.UniqEquipmentObject item) {
            base.Channel.DeleteUniqEquipmentObject(item);
        }
        
        public System.Collections.Generic.List<DAL.WCF.ServiceReference.UniqEquipmentObject> GetAllUniqEquipmentObject() {
            return base.Channel.GetAllUniqEquipmentObject();
        }
        
        public System.Collections.Generic.List<DAL.WCF.ServiceReference.UniqEquipmentObject> GetUniqEquipmentObjectListByUnitId(int unitId) {
            return base.Channel.GetUniqEquipmentObjectListByUnitId(unitId);
        }
        
        public void AddNonUniqEquipmentObject(DAL.WCF.ServiceReference.NonUniqEquipmentObject item) {
            base.Channel.AddNonUniqEquipmentObject(item);
        }
        
        public void EditNonUniqEquipmentObject(DAL.WCF.ServiceReference.NonUniqEquipmentObject item) {
            base.Channel.EditNonUniqEquipmentObject(item);
        }
        
        public void DeleteNonUniqEquipmentObject(DAL.WCF.ServiceReference.NonUniqEquipmentObject item) {
            base.Channel.DeleteNonUniqEquipmentObject(item);
        }
        
        public System.Collections.Generic.List<DAL.WCF.ServiceReference.NonUniqEquipmentObject> GetAllNonUniqEquipmentObject() {
            return base.Channel.GetAllNonUniqEquipmentObject();
        }
        
        public System.Collections.Generic.List<DAL.WCF.ServiceReference.NonUniqEquipmentObject> GetNonUniqEquipmentListObjectByUnitId(int unitId) {
            return base.Channel.GetNonUniqEquipmentListObjectByUnitId(unitId);
        }
        
        public long Count(string typeName) {
            return base.Channel.Count(typeName);
        }
        
        public Init.DAL.Sync.Change Add(Init.DAL.Sync.Change item) {
            return base.Channel.Add(item);
        }
        
        public Init.DAL.Sync.Change Edit(Init.DAL.Sync.Change item) {
            return base.Channel.Edit(item);
        }
        
        public void DeleteWhere(Init.DAL.Sync.Change item) {
            base.Channel.DeleteWhere(item);
        }
        
        public System.Collections.Generic.List<Init.DAL.Sync.Change> GetItemsWhere(string typeName, System.Collections.Generic.Dictionary<string, object> keys) {
            return base.Channel.GetItemsWhere(typeName, keys);
        }
        
        public Init.DAL.Sync.Transfer.TransferPart TransferItems(string typeName, Init.DAL.Sync.Transfer.TransferPartIdent ident) {
            return base.Channel.TransferItems(typeName, ident);
        }
        
        public System.Collections.Generic.List<Init.DAL.Sync.Change> GetPage(string typeName, int pageIndex, int count) {
            return base.Channel.GetPage(typeName, pageIndex, count);
        }
    }
}

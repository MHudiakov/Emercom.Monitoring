<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pbPleaseWait.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>